generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  fullName        String
  image           String?           @default("")
  phoneNumber     String?           @default("")
  location        String?           @default("")
  email           String            @unique
  password        String
  fcmToken        String?           @default("")
  isDeleted       Boolean           @default(false)
  expirationOtp   DateTime?
  otp             Int?
  role            UserRole          @default(USER)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ProductRating   ProductRating[]
  Cart            Cart[]
  PurchaseProduct PurchaseProduct[]
  Forum           Forum[]
  ForumReact      ForumReact[]
  SalesBoard      SalesBoard[]
  AiDiagnosis     AiDiagnosis[]

  @@map("Users")
}

model Product {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  images          String[]
  price           Float
  description     String
  weight          Float
  category        ProductCategory
  stock           Int?              @default(0)
  status          ProductStatus     @default(ACTIVE)
  avgRating       Int?              @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ProductRating   ProductRating[]
  Cart            Cart[]
  PurchaseProduct PurchaseProduct[]

  @@map("Products")
}

model ProductRating {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  rating    Float
  message   String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId

  @@map("User-Rating")
}

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int?     @default(1)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId

  @@map("Cart")
}

model PurchaseProduct {
  id              String      @id @default(auto()) @map("_id") @db.ObjectId
  quantity        Int
  name            String
  phoneNumber     String
  deliveryAddress String
  paymentId       String
  orderStatus     OrderStatus @default(PENDING)
  totalPrice      Float
  createdAt       DateTime    @default(now())
  product         Product?    @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId       String?     @db.ObjectId
  user            User        @relation(fields: [userId], references: [id])
  userId          String      @db.ObjectId

  @@map("Purchase-Product")
}

model News {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  image       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("News")
}

model Forum {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  description String
  image       String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.ObjectId
  ForumReact  ForumReact[]

  @@map("Forum")
}

model ForumReact {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  forum     Forum    @relation(fields: [forumId], references: [id])
  forumId   String   @db.ObjectId

  @@map("Forum-React")
}

model SalesBoard {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  image       String
  price       Float
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.ObjectId

  @@map("Sales-Board")
}

model AiDiagnosis {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  image        String
  problemCount Int
  description  String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.ObjectId

  @@map("Ai-Diagnosis")
}

enum UserRole {
  ADMIN
  USER
}

enum ProductStatus {
  ACTIVE
  INACTIVE
}

enum ProductCategory {
  CHICKS
  FEED
  MED
  TOOL
  EQUIP
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}
